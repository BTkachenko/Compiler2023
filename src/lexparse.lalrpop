use std::str::FromStr;

use crate::ast::*;

grammar;

// Tokeny
match {
    // Operatory arytmetyczne i porównawcze
    "+", "-", "*", "/", "%", "=", "!=", ">", "<", ">=", "<=",
    // Symbole i identyfikatory
    ",", "T", r"[0-9]+", r"[_a-z]+", 
    // Nawiasy i specjalne znaki
    "[", "]", "(", ")", ":=", 
    // Słowa kluczowe
    "IF", "THEN", "ELSE", "ENDIF", "WHILE", "DO", "ENDWHILE", "REPEAT", "UNTIL", ";",
    "READ", "WRITE", "PROGRAM", "IS", "IN", "END", "PROCEDURE",
    // Ignorowanie białych znaków i komentarzy
    "\n" => {},
    r"\s*" => {},
    r"#[^\n\r]*[\n\r]*" => {},
}

/// Definicja głównego programu
pub Program: Program = {
    <procedures:Procedures?> <main:Main> => (procedures, main),
};

/// Definiuje listę Commands
Commands: Commands = {
    <mut commands:Commands> <command:Command> => {
        commands.push(command);
        commands
    },
    <command: Command> => vec![command],
};

Procedures: Procedures = {
    <mut procedures:Procedures> "PROCEDURE" <procedure_head:ProcedureHead> "IS" <declarations:Declarations?> "IN" <commands:Commands> "END" => {
        procedures.push((procedure_head, declarations, commands));
        procedures
    },
    "PROCEDURE" <procedure_head:ProcedureHead> "IS" <declarations:Declarations?> "IN" <commands:Commands> "END" => vec![(procedure_head, declarations, commands)],
};

/// Reprezentuje główny blok programu, który zawiera opcjonalne deklaracje i listę poleceń.
Main: Main = {
    "PROGRAM" "IS" <declarations:Declarations?> "IN" <commands:Commands> "END" => (declarations, commands),
};


/// Zawiera definicje różnych typów poleceń, które mogą pojawić się w programie
Command: Command = {
    <id:Identifier> ":=" <expression:Expression> ";" => Command::Assign(id, expression),
    "IF" <condition:Condition> "THEN" <commands0:Commands> "ELSE" <commands1:Commands> "ENDIF" => Command::If(condition, commands0, Some(commands1)),
    "IF" <condition:Condition> "THEN" <commands:Commands> "ENDIF" => Command::If(condition, commands, None),
    "WHILE" <condition:Condition> "DO" <commands:Commands> "ENDWHILE" => Command::While(condition, commands),
    "REPEAT" <commands:Commands> "UNTIL" <condition:Condition> ";" => Command::Repeat(commands, condition),
    <procedure_call:ProcedureCall> ";" => Command::ProcCall(procedure_call),
    "READ" <id:Identifier> ";" => Command::Read(id),
    "WRITE" <value:Value> ";" => Command::Write(value),
};


/// Definiuje wartości, które mogą być liczbami lub identyfikatorami.
Value: Value = {
    <n:Num> => Value::Num(n),
    <id:Identifier> => Value::Id(id),
};

Identifier: Identifier = {
    <p: Pidentifier> => Identifier::Base(p),
    <p: Pidentifier> "[" <n: Num> "]" => Identifier::NumIndexed(p, n),
    <p0: Pidentifier> "[" <p1: Pidentifier> "]" => Identifier::PidIndexed(p0, p1),
};

/// Określa nagłówek procedury, zawierający identyfikator procedury i deklarację argumentów.
ProcedureHead: ProcedureHead = {
    <p:Pidentifier> "(" <a: ArgumentsDeclaration> ")" => (p, a),
};
/// Definiuje wywołanie procedury, zawierające identyfikator procedury i listę argumentów.
ProcedureCall: ProcedureCall = {
    <p:Pidentifier> "(" <a: Arguments> ")" => (p, a),
};

/// Określa deklaracje zmiennych w programie. Może to być pojedyncza zmienna lub tabela (zmienna indeksowana).
Declarations: Declarations = {
    <mut v:Declarations> "," <p: Pidentifier> => {
        v.push(DeclarationVariant::Base(p));
        v
    },
    <mut v:Declarations> "," <p: Pidentifier> "[" <n:Num> "]" => {
        v.push(DeclarationVariant::NumIndexed(p, n));
        v
    },
    <p: Pidentifier> => vec![DeclarationVariant::Base(p)],
    <p: Pidentifier> "[" <n:Num> "]" => vec![DeclarationVariant::NumIndexed(p, n)],
};

/// Definiuje różne typy warunków używanych w instrukcjach warunkowych i pętlach.
ArgumentsDeclaration: ArgumentsDeclaration = {
    <mut v:ArgumentsDeclaration> "," <p: Pidentifier> => {
        v.push(ArgumentsDeclarationVariant::Base(p));
        v
    },
    <mut v:ArgumentsDeclaration> "," "T" <p: Pidentifier> => {
        v.push(ArgumentsDeclarationVariant::Table(p));
        v
    },
    "T" <p: Pidentifier> => vec![ArgumentsDeclarationVariant::Table(p)],
    <p: Pidentifier> => vec![ArgumentsDeclarationVariant::Base(p)],
};

Arguments: Arguments = {
    <mut v:(<Pidentifier> ",")*> <e:Pidentifier?> => match e {
        None=> v,
        Some(e) => {
            v.push(e);
            v
        }
    }, 
};
Condition: Condition = {
    <v0:Value> "=" <v1:Value> => Condition::Equal(v0, v1),
    <v0:Value> "!=" <v1:Value> => Condition::NotEqual(v0, v1),
    <v0:Value> ">" <v1:Value> => Condition::Greater(v0, v1),
    <v0:Value> "<" <v1:Value> => Condition::Lower(v0, v1),
    <v0:Value> ">=" <v1:Value> => Condition::GreaterOrEqual(v0, v1),
    <v0:Value> "<=" <v1:Value> => Condition::LowerOrEqual(v0, v1),
};

Expression: Expression = {
    <v:Value> => Expression::Value(v),
    <v0:Value> "+" <v1:Value>=> Expression::Add(v0, v1),
    <v0:Value> "-" <v1:Value>=> Expression::Sub(v0, v1),
    <v0:Value> "*" <v1:Value>=> Expression::Mul(v0, v1),
    <v0:Value> "/" <v1:Value>=> Expression::Div(v0, v1),
    <v0:Value> "%" <v1:Value>=> Expression::Mod(v0, v1),
};

Num: Num = <s:r"[0-9]+"> => u64::from_str(s).unwrap();

Pidentifier: SourceIdent = <start: @L> <s:r"[_a-z]+"> => (s.to_string(), start);
